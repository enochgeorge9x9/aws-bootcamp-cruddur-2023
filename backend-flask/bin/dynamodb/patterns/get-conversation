#! usr/bin/env python
# REF: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb/client/query.html

CYAN='\033[1;36m'
NO_COLOR='\033[0m'
FAIL = '\033[91m'
print(F"{CYAN}-------- GETTING ALL MESSAGES FROM DYNAMODB TABLE --------{NO_COLOR}\n")

import boto3
import sys
import json
import datetime


attrs = {
    'endpoint_url': 'http://172.27.42.5:8000/' #dynamo-db local endpoint (check docker-compose for port)
}

#unset endpoint url fro use with production database. 
if len(sys.argv) == 2:
    if "prod" in sys.argv[1]:
        attrs = {}

# CONSTANT VARIABLES
DYNAMODB_TABLE_NAME = 'cruddur-message'
MESSAGE_GROUP_UUID = "102289ce-271b-49c1-91b7-5e3661f1bb7c"

# define the query parameters
query_params = {
    'TableName': DYNAMODB_TABLE_NAME,
    'ScanIndexForward': False,
    'Limit': 20,
    'KeyConditionExpression': 'pk = :pk AND begins_with(sk, :year)',
    # 'KeyConditionExpression': 'pk = :pk AND sk BETWEEN :start_date AND :end_date',
    'ExpressionAttributeValues': {
        ':pk': {'S': f"MSG#{MESSAGE_GROUP_UUID}"},
        ':year':{'S': "2024"},
        # ':start_date': {'S': "2024-02-15T12:03:00.000000+03:00"},
        # ':end_date': {'S': "2024-02-15T12:06:00.000000+03:00"},
    },
    'ReturnConsumedCapacity': 'TOTAL'
}

#query the table
dynamodb = boto3.client('dynamodb', **attrs)
response = dynamodb.query(**query_params)

# print the items returned by the query
# print(json.dumps(response, sort_keys=True, indent=2))

# print the consumed capacity
print(json.dumps({'ConsumedCapacity': response['ConsumedCapacity']}, sort_keys=True, indent=2))

items = response['Items']

for item in items[::-1]:
    sender_handle = item['user_handle']['S']
    message = item['message']['S']
    timestamp = item['sk']['S']
    dt_object = datetime.datetime.strptime(timestamp, '%Y-%m-%dT%H:%M:%S.%f%z')
    formatted_datetime = dt_object.strftime('%Y-%m-%d %I:%M %p')
    print(f"{sender_handle: <16}{formatted_datetime: <22}{message[:40]} ...") 
